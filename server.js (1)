const express = require('express');
const session = require('express-session');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const PORT = 3000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Session middleware
app.use(session({
    secret: 'secret_key',
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false }
}));

// Simulating a host user database
let users = [
    { username: 'user123', password: '12345678', isHost: true }
];

// Simulated posts data
let posts = [];

// Serve static files (HTML, CSS, etc.)
app.use(express.static('public'));

// Routes

// Serve the login page for the host only
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

// Handle host login
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    const user = users.find(u => u.username === username && u.password === password);
    
    if (user) {
        req.session.user = user;
        res.redirect('/admin/dashboard');
    } else {
        res.send('Invalid credentials');
    }
});

// Serve uploaded posts to everyone
app.get('/posts', (req, res) => {
    res.json(posts);
});

// Admin dashboard route
app.get('/admin/dashboard', (req, res) => {
    if (!req.session.user) {
        return res.redirect('/');
    }

    res.sendFile(path.join(__dirname, 'public', 'dashboard.html'));
});

// Handle new post uploads
app.post('/admin/upload', (req, res) => {
    const { postType, textContent } = req.body;

    if (postType === 'text') {
        posts.push({ id: posts.length + 1, type: postType, content: textContent });
    } else {
        // Handle file uploads (image, video)
        // For simplicity, we're just storing the filename
        const file = req.files.file;
        const postData = { id: posts.length + 1, type: postType, content: file.name }; // Replace with actual file handling
        posts.push(postData);
    }
    res.redirect('/admin/dashboard');
});

// Logout route
app.get('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            return res.redirect('/admin/dashboard');
        }
        res.redirect('/');
    });
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});